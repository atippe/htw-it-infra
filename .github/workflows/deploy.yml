name: Deploy EC2 Instance

on:
  workflow_run:
    workflows: ["Build and Push to ECR"]
    types:
      - completed
    branches: [main]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  STACK_NAME: ec2-docker-stack

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy CloudFormation stack
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ env.STACK_NAME }}
          template: cloudformation/ec2-docker.yml
          parameter-overrides: >-
            KeyName=${{ secrets.EC2_KEY_PAIR }},
            ECRImageURI=${{ env.ECR_IMAGE_URI }},
            DBUsername=${{ secrets.DB_USERNAME }},
            DBPassword=${{ secrets.DB_PASSWORD }}
          capabilities: CAPABILITY_IAM
          no-fail-on-empty-changeset: "1"
          disable-rollback: true

      - name: Debug if failed
        if: ${{ failure() }}
        run: |
          echo "Checking CloudFormation events..."
          aws cloudformation describe-stack-events \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'StackEvents[?ResourceStatus==`CREATE_FAILED`].[LogicalResourceId,ResourceStatusReason]' \
            --output table

      - name: Check if stack was just created
        id: stack-check
        run: |
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query 'Stacks[0].StackStatus' --output text)
          echo "STACK_STATUS=$STACK_STATUS" >> $GITHUB_OUTPUT

      - name: Start ASG Instance Refresh
        if: steps.stack-check.outputs.STACK_STATUS != 'CREATE_COMPLETE'
        run: |
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query 'Stacks[0].Outputs[?OutputKey==`AutoScalingGroupName`].OutputValue' --output text) \
            --preferences '{"MinHealthyPercentage": 50}'

      - name: Get CloudFormation outputs
        run: |
          OUTPUTS=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query 'Stacks[0].Outputs' --output json)
          echo "Stack Outputs:"
          echo "$OUTPUTS" | jq '.'
